generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id         String             @id @default(uuid())
  name       String
  price      Int //cents
  quantity   Int
  created_at DateTime           @default(now())
  updated_at DateTime           @default(now())
  orders     ProductsOnOrders[]

  @@map("products")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  avatar     String?
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
  token      UserToken[]

  @@map("users")
}

model UserToken {
  id         String   @id @default(uuid())
  token      String   @default(uuid())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("user_tokens")
}

model Customer {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  order      Order[]

  @@map("customers")
}

model Order {
  id          String             @id @default(uuid())
  customer    Customer?          @relation(fields: [customer_id], references: [id], onDelete: SetNull)
  customer_id Int?
  created_at  DateTime           @default(now())
  updated_at  DateTime           @default(now())
  status      String             @default("PENDING")
  products    ProductsOnOrders[]

  @@map("orders")
}

model ProductsOnOrders {
  product    Product @relation(fields: [product_id], references: [id])
  product_id String

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String
  quantity Int
  price    Int

  @@id([product_id, order_id])
  @@map("orders_products")
}
